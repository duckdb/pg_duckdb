CREATE TABLE t1(a INT, b INT, c TEXT);
INSERT INTO t1 SELECT g, g % 100, 'scan_potgres_table_'||g from generate_series(1,100000) g;
SET client_min_messages TO DEBUG1;
-- COUNT(*)
SELECT COUNT(*) FROM t1;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT COUNT(*) FROM public.t1
RUNNING: ON 2 PARALLEL WORKER(S).
EXECUTING: 
Parallel Aggregate
  ->  Parallel Seq Scan on t1

 count  
--------
 100000
(1 row)

-- SEQ SCAN
SELECT COUNT(a) FROM t1 WHERE a < 10;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.t1 WHERE a<10
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Seq Scan on t1
  Filter: (a < 10)

 count 
-------
     9
(1 row)

-- CREATE INDEX on t1
SET client_min_messages TO DEFAULT;
CREATE INDEX ON t1(a);
SET client_min_messages TO DEBUG1;
-- BITMAP INDEX
SELECT COUNT(a) FROM t1 WHERE a < 10;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.t1 WHERE a<10
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Bitmap Heap Scan on t1
  Recheck Cond: (a < 10)
  ->  Bitmap Index Scan on t1_a_idx
        Index Cond: (a < 10)

 count 
-------
     9
(1 row)

-- INDEXONLYSCAN
SET enable_bitmapscan TO false;
SELECT COUNT(a) FROM t1 WHERE a = 1;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.t1 WHERE a=1
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Index Only Scan using t1_a_idx on t1
  Index Cond: (a = 1)

 count 
-------
     1
(1 row)

-- INDEXSCAN
SELECT COUNT(c) FROM t1 WHERE a = 1;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT c FROM public.t1 WHERE a=1
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Index Scan using t1_a_idx on t1
  Index Cond: (a = 1)

 count 
-------
     1
(1 row)

-- TEMPORARY TABLES JOIN WITH HEAP TABLES
SET client_min_messages TO DEFAULT;
CREATE TEMP TABLE t2(a int);
INSERT INTO t2 VALUES (1), (2), (3);
SET client_min_messages TO DEBUG1;
SELECT t1.a, t2.a FROM t1, t2 WHERE t1.a = t2.a;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM pg_temp.t2
RUNNING: IN PROCESS THREAD.
EXECUTING: 
Seq Scan on t2

DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.t1 WHERE (a>=1 AND a<=3)
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Index Only Scan using t1_a_idx on t1
  Index Cond: ((a >= 1) AND (a <= 3))

 a | a 
---+---
 1 | 1
 2 | 2
 3 | 3
(3 rows)

-- JOIN WITH SAME TABLE (on WORKERS)
SELECT COUNT(*) FROM t1 AS t1_1, t1 AS t1_2 WHERE t1_1.a < 2 AND t1_2.a > 8;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.t1 WHERE a>8
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Seq Scan on t1
  Filter: (a > 8)

DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.t1 WHERE a<2
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Seq Scan on t1
  Filter: (a < 2)

 count 
-------
 99992
(1 row)

-- JOIN WITH SAME TABLE (in BACKEND PROCESS)
SET max_parallel_workers TO 0;
SELECT COUNT(*) FROM t1 AS t1_1, t1 AS t1_2 WHERE t1_1.a < 2 AND t1_2.a > 8;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.t1 WHERE a>8
RUNNING: IN PROCESS THREAD.
EXECUTING: 
Parallel Seq Scan on t1
  Filter: (a > 8)

DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.t1 WHERE a<2
RUNNING: IN PROCESS THREAD.
EXECUTING: 
Parallel Seq Scan on t1
  Filter: (a < 2)

 count 
-------
 99992
(1 row)

SET max_parallel_workers TO DEFAULT;
-- PARTITIONED TABLE
SET client_min_messages TO DEFAULT;
CREATE TABLE partitioned_table(a int, b INT, c text) PARTITION BY RANGE (a);
CREATE TABLE partition_1 PARTITION OF partitioned_table FOR VALUES FROM (0) TO (50);
CREATE TABLE partition_2 PARTITION OF partitioned_table FOR VALUES FROM (50) TO (100);
INSERT INTO partitioned_table SELECT g % 100, g, 'abcde_'||g from generate_series(1,100000) g;
CREATE INDEX ON partitioned_table(b);
SET client_min_messages TO DEBUG1;
SELECT COUNT(*) FROM partitioned_table WHERE a < 25;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.partitioned_table WHERE a<25
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Seq Scan on partition_1 partitioned_table
  Filter: (a < 25)

 count 
-------
 25000
(1 row)

SELECT COUNT(*) FROM partitioned_table WHERE a < 75;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.partitioned_table WHERE a<75
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Append
  ->  Seq Scan on partition_1 partitioned_table_1
        Filter: (a < 75)
  ->  Seq Scan on partition_2 partitioned_table_2
        Filter: (a < 75)

 count 
-------
 75000
(1 row)

SELECT COUNT(*) FROM partitioned_table WHERE a < 25 OR a > 75;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.partitioned_table WHERE (a<25 OR a>75)
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Append
  ->  Seq Scan on partition_1 partitioned_table_1
        Filter: ((a < 25) OR (a > 75))
  ->  Seq Scan on partition_2 partitioned_table_2
        Filter: ((a < 25) OR (a > 75))

 count 
-------
 49000
(1 row)

SELECT COUNT(*) FROM partitioned_table WHERE a < 25 AND b = 1;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a, b FROM public.partitioned_table WHERE a<25 AND b=1
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Index Scan using partition_1_b_idx on partition_1 partitioned_table
  Index Cond: (b = 1)
  Filter: (a < 25)

 count 
-------
     1
(1 row)

SELECT COUNT(*) FROM partitioned_table, t2 WHERE partitioned_table.a = t2.a AND partitioned_table.a < 2;
DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM public.partitioned_table WHERE a<2
RUNNING: ON 1 PARALLEL WORKER(S).
EXECUTING: 
Parallel Seq Scan on partition_1 partitioned_table
  Filter: (a < 2)

DEBUG:  (PGDuckDB/PostgresTableReader)

QUERY: SELECT a FROM pg_temp.t2 WHERE (a<2 AND (a>=0 AND a<=1))
RUNNING: IN PROCESS THREAD.
EXECUTING: 
Seq Scan on t2
  Filter: ((a < 2) AND (a >= 0) AND (a <= 1))

 count 
-------
  1000
(1 row)

SET enable_bitmapscan TO DEFAULT;
SET client_min_messages TO DEFAULT;
DROP TABLE t1, t2, partitioned_table;
