-- Invalid type
CREATE SERVER invalid_duckdb_server
TYPE 'unknown'
FOREIGN DATA WRAPPER duckdb;
ERROR:  Secret type 'unknown' not found
-- Invalid use of restricted option (with various casing)
CREATE SERVER invalid_duckdb_server
TYPE 'http'
FOREIGN DATA WRAPPER duckdb
OPTIONS (hTtP_pRoXy_PaSsWoRd 'very secret');
ERROR:  Option 'http_proxy_password' cannot be used in the SERVER's OPTIONS, please move it to the USER MAPPING
CREATE SERVER invalid_duckdb_server
TYPE 's3'
FOREIGN DATA WRAPPER duckdb
OPTIONS (SECRET 'dont leak me', session_TOKEN 'shhhhh');
ERROR:  Options 'session_token', 'secret' cannot be used in the SERVER's OPTIONS, please move it to the USER MAPPING
CREATE SERVER invalid_duckdb_server
TYPE 'azure'
FOREIGN DATA WRAPPER duckdb
OPTIONS (CONNECTION_STRING 'all my life secrets here');
ERROR:  Option 'connection_string' cannot be used in the SERVER's OPTIONS, please move it to the USER MAPPING
-- No secret was created
SELECT * FROM duckdb.query($$ SELECT count(*) FROM duckdb_secrets(); $$);
 count_star() 
--------------
            0
(1 row)

-- Valid S3
CREATE SERVER valid_s3_server
TYPE 's3'
FOREIGN DATA WRAPPER duckdb;
-- Secret was created
SELECT * FROM duckdb.query($$ FROM which_secret('s3://some-bucket/file.parquet', 's3'); $$);
              name               | persistent | storage 
---------------------------------+------------+---------
 pgduckdb_secret_valid_s3_server | TEMPORARY  | memory
(1 row)

-- Valid secrets for other types (don't load Azure or other extensions)
CREATE SERVER valid_r2_server TYPE 'r2' FOREIGN DATA WRAPPER duckdb;
CREATE SERVER valid_hf_server TYPE 'huggingface' FOREIGN DATA WRAPPER duckdb;
CREATE SERVER valid_gcs_server TYPE 'gcs' FOREIGN DATA WRAPPER duckdb;
-- Check them all
SELECT * FROM duckdb.query($$ SELECT name, type FROM duckdb_secrets(); $$);
               name               |    type     
----------------------------------+-------------
 pgduckdb_secret_valid_gcs_server | gcs
 pgduckdb_secret_valid_hf_server  | huggingface
 pgduckdb_secret_valid_r2_server  | r2
 pgduckdb_secret_valid_s3_server  | s3
(4 rows)

-- Add one more (test drop & recreate)
CREATE SERVER valid_http_server TYPE 'http' FOREIGN DATA WRAPPER duckdb;
-- And verify we have them all
SELECT * FROM duckdb.query($$ SELECT name, type FROM duckdb_secrets(); $$);
               name                |    type     
-----------------------------------+-------------
 pgduckdb_secret_valid_gcs_server  | gcs
 pgduckdb_secret_valid_hf_server   | huggingface
 pgduckdb_secret_valid_http_server | http
 pgduckdb_secret_valid_r2_server   | r2
 pgduckdb_secret_valid_s3_server   | s3
(5 rows)

-- PROVIDER option needs the `aws` extension
SELECT duckdb.install_extension('aws');
 install_extension 
-------------------
 
(1 row)

CREATE SERVER valid_s3_cred_chain
TYPE 's3'
FOREIGN DATA WRAPPER duckdb
OPTIONS (PROVIDER 'credential_chain', CHAIN ''); -- use empty chain otherwise it takes too much time
-- Drop some
DROP SERVER valid_r2_server;
DROP SERVER valid_hf_server;
DROP SERVER valid_gcs_server;
DROP SERVER valid_http_server;
-- Make sure we have the 'credential_chain'
SELECT * FROM duckdb.query($$
    SELECT
        name,
        map_from_entries(
            list_transform( -- split 'key=value' strings to have an array of [key, value]
            list_transform( -- split the secret string by `;` to have 'key=value' strings
                regexp_split_to_array(secret_string, ';'),
                x -> regexp_split_to_array(x, '=')
            ),
            x -> struct_pack(k := x[1], v := x[2])
            )
        ).provider as provider
    FROM duckdb_secrets();
$$);
                name                 |     provider     
-------------------------------------+------------------
 pgduckdb_secret_valid_s3_cred_chain | credential_chain
 pgduckdb_secret_valid_s3_server     | config
(2 rows)

DROP SERVER valid_s3_server;
DROP SERVER valid_s3_cred_chain;
-- Nothing
SELECT * FROM duckdb.query($$ SELECT name, type FROM duckdb_secrets(); $$);
 name | type 
------+------
(0 rows)

-- Now create secrets with USER MAPPING
CREATE SERVER valid_s3_server TYPE 's3' FOREIGN DATA WRAPPER duckdb;
CREATE USER MAPPING FOR CURRENT_USER
SERVER valid_s3_server
OPTIONS (KEY_ID 'my_secret_key', SECRET 'my_secret_value');
SELECT * FROM duckdb.query($$
    SELECT
        name,
        secrets.key_id,
        secrets.secret
    FROM (
        SELECT *,
        map_from_entries(
            list_transform( -- split 'key=value' strings to have an array of [key, value]
            list_transform( -- split the secret string by `;` to have 'key=value' strings
                regexp_split_to_array(secret_string, ';'),
                x -> regexp_split_to_array(x, '=')
            ),
            x -> struct_pack(k := x[1], v := x[2])
            )
        ) as secrets
        FROM duckdb_secrets()
    );
$$);
              name               |    key_id     |  secret  
---------------------------------+---------------+----------
 pgduckdb_secret_valid_s3_server | my_secret_key | redacted
(1 row)

SET client_min_messages=WARNING; -- suppress NOTICE that include username
DROP SERVER valid_s3_server CASCADE;
RESET client_min_messages;
-- Nothing
SELECT * FROM duckdb.query($$ SELECT name, type FROM duckdb_secrets(); $$);
 name | type 
------+------
(0 rows)

-- User helpers --
-- 1. Simple secrets
-- S3
SELECT duckdb.create_simple_secret('S3', 'my first key', 'my secret', 'my session token', 'my-region-42');
 create_simple_secret 
----------------------
 simple_s3_secret
(1 row)

SELECT duckdb.create_simple_secret('S3', 'my other key', 'my secret', 'my session token'); -- Default region
 create_simple_secret 
----------------------
 simple_s3_secret_1
(1 row)

SELECT duckdb.create_simple_secret('S3', 'my third key', 'my secret'); -- No session token, default region
 create_simple_secret 
----------------------
 simple_s3_secret_2
(1 row)

-- With named arguments (simple_s3_secret_3)
SELECT duckdb.create_simple_secret(
    'S3',
    key_id := 'my named key',
    secret := 'my secret',
    session_token := 'foo',
    url_style := 'path',
    provider := 'credential_chain',
    endpoint := 'my-endpoint.com'
);
 create_simple_secret 
----------------------
 simple_s3_secret_3
(1 row)

-- Alter SERVER (public options only)
ALTER SERVER simple_s3_secret_3 OPTIONS (SET endpoint 'my_other_endoint', SET url_style 'true');
-- R2
SELECT duckdb.create_simple_secret('R2', 'my r2 key1', 'my secret', 'my session token', 'my-region-42');
 create_simple_secret 
----------------------
 simple_r2_secret
(1 row)

SELECT duckdb.create_simple_secret('R2', 'my r2 key2', 'my secret');
 create_simple_secret 
----------------------
 simple_r2_secret_1
(1 row)

-- GCS
SELECT duckdb.create_simple_secret('GCS', 'my first key', 'my secret', 'my session token', 'my-region-42');
 create_simple_secret 
----------------------
 simple_gcs_secret
(1 row)

SELECT duckdb.create_simple_secret('GCS', 'my other key', 'my secret', 'my session token'); -- Default region
 create_simple_secret 
----------------------
 simple_gcs_secret_1
(1 row)

SELECT duckdb.create_simple_secret('GCS', 'my third key', 'my secret'); -- No session token, default region
 create_simple_secret 
----------------------
 simple_gcs_secret_2
(1 row)

-- Invalid
SELECT duckdb.create_simple_secret('BadType', '-', '-');
ERROR:  Invalid type 'BadType': this helper only supports 's3', 'gcs' or 'r2'. Please refer to the documentation to create advanced secrets.
-- 2. Azure
SELECT duckdb.create_azure_secret('hello world');
 create_azure_secret 
---------------------
 azure_secret
(1 row)

-- Now check everything.
SELECT fs.srvname, fs.srvtype, fs.srvoptions, um.umoptions
FROM pg_foreign_server fs
INNER JOIN pg_foreign_data_wrapper fdw ON fdw.oid = fs.srvfdw
LEFT JOIN pg_user_mapping um ON um.umserver = fs.oid
WHERE fdw.fdwname = 'duckdb' AND fs.srvtype != 'motherduck';
       srvname       | srvtype |                              srvoptions                              |                                  umoptions                                  
---------------------+---------+----------------------------------------------------------------------+-----------------------------------------------------------------------------
 simple_s3_secret    | S3      | {region=my-region-42}                                                | {"key_id=my first key","secret=my secret","session_token=my session token"}
 simple_s3_secret_1  | S3      |                                                                      | {"key_id=my other key","secret=my secret","session_token=my session token"}
 simple_s3_secret_2  | S3      |                                                                      | {"key_id=my third key","secret=my secret"}
 simple_s3_secret_3  | S3      | {url_style=true,provider=credential_chain,endpoint=my_other_endoint} | {"key_id=my named key","secret=my secret",session_token=foo}
 simple_r2_secret    | R2      | {region=my-region-42}                                                | {"key_id=my r2 key1","secret=my secret","session_token=my session token"}
 simple_r2_secret_1  | R2      |                                                                      | {"key_id=my r2 key2","secret=my secret"}
 simple_gcs_secret   | GCS     | {region=my-region-42}                                                | {"key_id=my first key","secret=my secret","session_token=my session token"}
 simple_gcs_secret_1 | GCS     |                                                                      | {"key_id=my other key","secret=my secret","session_token=my session token"}
 simple_gcs_secret_2 | GCS     |                                                                      | {"key_id=my third key","secret=my secret"}
 azure_secret        | azure   |                                                                      | {"connection_string=hello world"}
(10 rows)

SELECT * FROM duckdb.query($$
    SELECT
        name,
        type,
        secrets.key_id,
        secrets.region,
        secrets.session_token,
        secrets.secret,
        secrets.connection_string
    FROM (
        SELECT *,
        map_from_entries(
            list_transform( -- split 'key=value' strings to have an array of [key, value]
            list_transform( -- split the secret string by `;` to have 'key=value' strings
                regexp_split_to_array(secret_string, ';'),
                x -> regexp_split_to_array(x, '=')
            ),
            x -> struct_pack(k := x[1], v := x[2])
            )
        ) as secrets
        FROM duckdb_secrets()
    );
$$);
                name                 | type  |    key_id    |    region    | session_token |  secret  | connection_string 
-------------------------------------+-------+--------------+--------------+---------------+----------+-------------------
 pgduckdb_secret_azure_secret        | azure |              |              |               |          | redacted
 pgduckdb_secret_simple_gcs_secret   | gcs   | my first key | my-region-42 | redacted      | redacted | 
 pgduckdb_secret_simple_gcs_secret_1 | gcs   | my other key |              | redacted      | redacted | 
 pgduckdb_secret_simple_gcs_secret_2 | gcs   | my third key |              |               | redacted | 
 pgduckdb_secret_simple_r2_secret    | r2    | my r2 key1   | my-region-42 | redacted      | redacted | 
 pgduckdb_secret_simple_r2_secret_1  | r2    | my r2 key2   |              |               | redacted | 
 pgduckdb_secret_simple_s3_secret    | s3    | my first key | my-region-42 | redacted      | redacted | 
 pgduckdb_secret_simple_s3_secret_1  | s3    | my other key |              | redacted      | redacted | 
 pgduckdb_secret_simple_s3_secret_2  | s3    | my third key |              |               | redacted | 
 pgduckdb_secret_simple_s3_secret_3  | s3    | my named key | us-east-1    | redacted      | redacted | 
(10 rows)

