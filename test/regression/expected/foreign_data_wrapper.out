SET duckdb.force_execution TO false;
-- MD is not enabled
SELECT * FROM duckdb.is_motherduck_enabled();
 is_motherduck_enabled 
-----------------------
 f
(1 row)

-- Must provide a TYPE clause
CREATE SERVER invalid_server1 FOREIGN DATA WRAPPER pg_duckdb;
ERROR:  Missing required option: 'type'
-- Must be a valid TYPE
CREATE SERVER invalid_server2
TYPE 'foo'
FOREIGN DATA WRAPPER pg_duckdb;
ERROR:  Unknown SERVER type: 'foo'
-- Should succeed with no option
CREATE SERVER valid_md_server1
TYPE 'motherduck'
FOREIGN DATA WRAPPER pg_duckdb;
-- MD is still NOT enabled
SELECT * FROM duckdb.is_motherduck_enabled();
 is_motherduck_enabled 
-----------------------
 f
(1 row)

-- Should create a USER MAPPING
CREATE USER user1 IN ROLE duckdb_group;
-- Missing token
CREATE USER MAPPING FOR user1
SERVER valid_md_server1;
ERROR:  Missing required option: 'token'
-- Invalid option
CREATE USER MAPPING FOR user1
SERVER valid_md_server1
OPTIONS (invalid_option 'foo');
ERROR:  Unknown option: 'invalid_option'
-- Good mapping
CREATE USER MAPPING FOR user1
SERVER valid_md_server1
OPTIONS (token 'foo');
-- Can't have two mappings for the same (user, server)
CREATE USER MAPPING FOR user1
SERVER valid_md_server1
OPTIONS (token 'foo');
ERROR:  user mapping for "user1" already exists for server "valid_md_server1"
-- MD is still not enabled (no mapping for current user)
SELECT * FROM duckdb.is_motherduck_enabled();
 is_motherduck_enabled 
-----------------------
 f
(1 row)

-- Mapping for current user
CREATE USER MAPPING FOR CURRENT_USER
SERVER valid_md_server1
OPTIONS (token 'foo');
-- Now MD is enabled
SELECT * FROM duckdb.is_motherduck_enabled();
 is_motherduck_enabled 
-----------------------
 t
(1 row)

-- TODO: test ALTER & DROP SERVER
-- TODO: test ALTER & DROP USER MAPPING
