CREATE USER user1 IN ROLE duckdb_group;
CREATE USER user2 IN ROLE duckdb_group;
CREATE USER user3;
CREATE TABLE t (a int);
GRANT SELECT ON t TO user1;
GRANT SELECT ON t TO user3;
-- Should be allowed because access was granted
SET ROLE user1;
SELECT * FROM t;
 a 
---
(0 rows)

-- Should fail
SET ROLE user2;
SELECT * FROM t;
ERROR:  permission denied for table t
-- Should fail because we're not allowed to read the internal tables by default
SELECT * from duckdb.secrets;
ERROR:  permission denied for table secrets
SELECT * from duckdb.tables;
ERROR:  permission denied for table tables
SELECT * from duckdb.extensions;
ERROR:  permission denied for table extensions
-- Should fail because raw_query is to dangerous for regular users and the
-- others currently allow for SQL injection
SET duckdb.force_execution = false;
SELECT * FROM duckdb.raw_query($$ SELECT * FROM t $$);
ERROR:  permission denied for function raw_query
SELECT * FROM duckdb.install_extension('some hacky sql');
ERROR:  permission denied for function install_extension
SELECT * FROM duckdb.cache('some hacky sql', 'some more hacky sql');
ERROR:  permission denied for function cache
SET duckdb.force_execution = true;
-- read_csv from the local filesystem should be disallowed
SELECT count("sepal.length") FROM read_csv('../../data/iris.csv') AS ("sepal.length" FLOAT);
ERROR:  (PGDuckDB/CreatePlan) Prepared query returned an error: 'Permission Error: File system LocalFileSystem has been disabled by configuration
-- Should fail because DuckDB execution is not allowed for this user
SET ROLE user3;
SELECT * FROM t;
ERROR:  DuckDB execution is not allowed because you have not been granted the duckdb.postgres_role
-- Should work with regular posgres execution though, because this user is
-- allowed to read the table.
SET duckdb.force_execution = false;
SELECT * FROM t;
 a 
---
(0 rows)

SET duckdb.force_execution = true;
-- Let's add RLS
RESET ROLE;
ALTER TABLE t ENABLE ROW LEVEL SECURITY;
-- Should still be allowed, we're superuser
SELECT * FROM t;
 a 
---
(0 rows)

-- Should fail now, we don't support RLS
SET ROLE user1;
SELECT * FROM t;
ERROR:  (PGDuckDB/pgduckdb_relation_name) Cannot use "t" in a DuckDB query, because RLS is enabled on it
RESET ROLE;
DROP TABLE t;
DROP USER user1, user2;
