-- For this test we duckdb set execution to false
SET duckdb.force_execution = false;
SET duckdb.unsafe_allow_execution_inside_functions = true;
CREATE TABLE t(a int);
INSERT INTO t VALUES (1);
CREATE TEMP TABLE t_ddb(a int) USING duckdb;
INSERT INTO t_ddb VALUES (1);
BEGIN;
SELECT * FROM t_ddb;
 a 
---
 1
(1 row)

INSERT INTO t_ddb VALUES (2);
SELECT * FROM t_ddb ORDER BY a;
 a 
---
 1
 2
(2 rows)

ROLLBACK;
-- Executing many write commands is fine
BEGIN;
INSERT INTO t_ddb VALUES (2);
INSERT INTO t_ddb VALUES (3);
INSERT INTO t_ddb VALUES (4);
INSERT INTO t_ddb VALUES (5);
INSERT INTO t_ddb VALUES (6);
COMMIT;
SELECT * FROM t_ddb;
 a 
---
 1
 2
 3
 4
 5
 6
(6 rows)

-- Writing to PG and DDB tables in the same transaction is not supported. We
-- fail early for simple DML (no matter the order).
BEGIN;
INSERT INTO t_ddb VALUES (2);
INSERT INTO t VALUES (2);
ERROR:  Writing to DuckDB and Postgres tables in the same transaction block is not supported
ROLLBACK;
BEGIN;
INSERT INTO t VALUES (2);
INSERT INTO t_ddb VALUES (2);
ERROR:  (PGDuckDB/DuckdbExecutorStartHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
ROLLBACK;
-- Unless users explicitely opt-in
BEGIN;
SET LOCAL duckdb.unsafe_allow_mixed_transactions = true;
INSERT INTO t_ddb VALUES (4);
INSERT INTO t VALUES (4);
COMMIT;
BEGIN;
SET LOCAL duckdb.unsafe_allow_mixed_transactions = true;
INSERT INTO t VALUES (5);
INSERT INTO t_ddb VALUES (5);
COMMIT;
-- And for other writes that are not easy to detect, such as CREATE TABLE, we
-- fail on COMMIT.
BEGIN;
INSERT INTO t_ddb VALUES (2);
CREATE TABLE t2(a int);
COMMIT;
ERROR:  (PGDuckDB/DuckdbXactCallback_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
-- Savepoints in PG-only transactions should still work
BEGIN;
INSERT INTO t VALUES (2);
SAVEPOINT my_savepoint;
INSERT INTO t VALUES (3);
ROLLBACK TO SAVEPOINT my_savepoint;
COMMIT;
-- But savepoints are not allowed in DuckDB transactions
BEGIN;
INSERT INTO t_ddb VALUES (2);
SAVEPOINT my_savepoint;
ERROR:  (PGDuckDB/DuckdbSubXactCallback_Cpp) Not implemented Error: SAVEPOINT is not supported in DuckDB
ROLLBACK;;
-- Also not already started ones
BEGIN;
SAVEPOINT my_savepoint;
INSERT INTO t_ddb VALUES (2);
ERROR:  (PGDuckDB/CreatePlan) Not implemented Error: SAVEPOINT and subtransactions are not supported in DuckDB
ROLLBACK;;
-- Unless the subtransaction is already completed
BEGIN;
SAVEPOINT my_savepoint;
SELECT count(*) FROM t;
 count 
-------
     4
(1 row)

RELEASE SAVEPOINT my_savepoint;
INSERT INTO t_ddb VALUES (2);
COMMIT;
-- Statements in functions should be run inside a single transaction. So a
-- failure later in the function should roll back.
CREATE OR REPLACE FUNCTION f(fail boolean) RETURNS void
    LANGUAGE plpgsql
    RETURNS NULL ON NULL INPUT
    AS
$$
BEGIN
INSERT INTO t_ddb VALUES (8);
IF fail THEN
    RAISE EXCEPTION 'fail';
END IF;
END;
$$;
-- After executing the function the table should not contain the value 8,
-- because that change was rolled back
SELECT * FROM f(true);
ERROR:  fail
CONTEXT:  PL/pgSQL function f(boolean) line 5 at RAISE
SELECT * FROM t_ddb ORDER BY a;
 a 
---
 1
 2
 2
 3
 4
 4
 5
 5
 6
(9 rows)

-- But if the function succeeds we should see the new value
SELECT * FROM f(false);
 f 
---
 
(1 row)

SELECT * FROM t_ddb ORDER BY a;
 a 
---
 1
 2
 2
 3
 4
 4
 5
 5
 6
 8
(10 rows)

-- DuckDB DDL in transactions is allowed
BEGIN;
    CREATE TEMP TABLE t_ddb2(a int) USING duckdb;
    CREATE TEMP TABLE t_ddb3(a) USING duckdb AS SELECT 1;
    DROP TABLE t_ddb3;
    INSERT INTO t_ddb2 VALUES (1);
    ALTER TABLE t_ddb2 ADD COLUMN b int;
    ALTER TABLE t_ddb2 ADD COLUMN c int;
    ALTER TABLE t_ddb2 ADD COLUMN d int DEFAULT 100, ADD COLUMN e int DEFAULT 10;
    ALTER TABLE t_ddb2 RENAME COLUMN b TO f;
    ALTER TABLE t_ddb2 RENAME TO t_ddb4;
    SELECT * FROM t_ddb4;
 a | f | c |  d  | e  
---+---+---+-----+----
 1 |   |   | 100 | 10
(1 row)

END;
DROP TABLE t_ddb4;
-- Similarly is DDL in functions
CREATE OR REPLACE FUNCTION f2() RETURNS void
    LANGUAGE plpgsql
    RETURNS NULL ON NULL INPUT
    AS
$$
BEGIN
    CREATE TEMP TABLE t_ddb2(a int) USING duckdb;
    CREATE TEMP TABLE t_ddb3(a) USING duckdb AS SELECT 1;
    DROP TABLE t_ddb3;
    INSERT INTO t_ddb2 VALUES (1);
    ALTER TABLE t_ddb2 ADD COLUMN b int;
    ALTER TABLE t_ddb2 ADD COLUMN c int;
    ALTER TABLE t_ddb2 ADD COLUMN d int DEFAULT 100, ADD COLUMN e int DEFAULT 10;
    ALTER TABLE t_ddb2 RENAME COLUMN b TO f;
    ALTER TABLE t_ddb2 RENAME TO t_ddb4;
END;
$$;
SELECT * FROM f2();
 f2 
----
 
(1 row)

DROP TABLE t_ddb4;
-- ...unless there's also PG only changes happing in the same transaction (no matter the order of statements).
BEGIN;
    CREATE TABLE t_x(a int);
    CREATE TEMP TABLE t_ddb2(a int) USING duckdb;
ERROR:  (PGDuckDB/DuckdbUtilityHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
END;
BEGIN;
    CREATE TEMP TABLE t_ddb2(a int) USING duckdb;
    CREATE TABLE t_x(a int);
END;
ERROR:  (PGDuckDB/DuckdbXactCallback_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
BEGIN;
    CREATE TABLE t_x(a int);
    CREATE TEMP TABLE t_ddb2(a) USING duckdb AS SELECT 1;
ERROR:  (PGDuckDB/DuckdbUtilityHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
END;
BEGIN;
    CREATE TEMP TABLE t_ddb2(a) USING duckdb AS SELECT 1;
    CREATE TABLE t_x(a int);
END;
ERROR:  (PGDuckDB/DuckdbXactCallback_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
-- And again the same for functions
CREATE OR REPLACE FUNCTION f2() RETURNS void
    LANGUAGE plpgsql
    RETURNS NULL ON NULL INPUT
    AS
$$
BEGIN
    CREATE TABLE t_x(a int);
    CREATE TEMP TABLE t_ddb2(a int) USING duckdb;
END;
$$;
SELECT * FROM f2();
ERROR:  (PGDuckDB/DuckdbUtilityHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
CONTEXT:  SQL statement "CREATE TEMP TABLE t_ddb2(a int) USING duckdb"
PL/pgSQL function f2() line 4 at SQL statement
CREATE OR REPLACE FUNCTION f2() RETURNS void
    LANGUAGE plpgsql
    RETURNS NULL ON NULL INPUT
    AS
$$
BEGIN
    CREATE TABLE t_x(a int);
    CREATE TEMP TABLE t_ddb2(a int) USING duckdb;
END;
$$;
SELECT * FROM f2();
ERROR:  (PGDuckDB/DuckdbUtilityHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
CONTEXT:  SQL statement "CREATE TEMP TABLE t_ddb2(a int) USING duckdb"
PL/pgSQL function f2() line 4 at SQL statement
BEGIN;
    CREATE TEMP TABLE t_ddb2(a) USING duckdb AS SELECT 1;
    CREATE TABLE t_x(a int);
    DROP TABLE t_ddb;
ERROR:  (PGDuckDB/DuckdbUtilityHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
END;
BEGIN;
    DROP TABLE t_ddb;
    CREATE TABLE t_x(a int);
END;
ERROR:  (PGDuckDB/DuckdbXactCallback_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
BEGIN;
    CREATE TABLE t_x(a int);
    DROP TABLE t_ddb;
ERROR:  (PGDuckDB/DuckdbUtilityHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
END;
BEGIN;
    CREATE TABLE t_x(a int);
    ALTER TABLE t_ddb ADD COLUMN b int;
ERROR:  (PGDuckDB/DuckdbUtilityHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
END;
BEGIN;
    ALTER TABLE t_ddb ADD COLUMN b int;
    CREATE TABLE t_x(a int);
END;
ERROR:  (PGDuckDB/DuckdbXactCallback_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
BEGIN;
    CREATE TABLE t_x(a int);
    ALTER TABLE t_ddb RENAME COLUMN a TO z;
ERROR:  (PGDuckDB/DuckdbUtilityHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
END;
BEGIN;
    ALTER TABLE t_ddb RENAME COLUMN a TO z;
    CREATE TABLE t_x(a int);
END;
ERROR:  (PGDuckDB/DuckdbXactCallback_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
BEGIN;
    CREATE TABLE t_x(a int);
    ALTER TABLE t_ddb RENAME TO t_ddb_new;
ERROR:  (PGDuckDB/DuckdbUtilityHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
END;
BEGIN;
    ALTER TABLE t_ddb RENAME TO t_ddb_new;
    CREATE TABLE t_x(a int);
END;
ERROR:  (PGDuckDB/DuckdbXactCallback_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
-- Dropping both duckdb tables and postgres tables in the same command is
-- disallowed in a transaction.
BEGIN;
    DROP TABLE t, t_ddb;
ERROR:  Dropping both DuckDB and non-DuckDB tables in the same transaction is not supported
END;
-- Dropping both duckdb tables and postgres tables in the same command is
-- disallowed in a transaction.
BEGIN;
    DROP TABLE t, t_ddb;
ERROR:  Dropping both DuckDB and non-DuckDB tables in the same transaction is not supported
END;
-- In separate commands it's also not allowed
BEGIN;
    DROP TABLE t;
    DROP TABLE t_ddb;
ERROR:  (PGDuckDB/DuckdbUtilityHook_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
END;
-- ...in any order
BEGIN;
    DROP TABLE t_ddb;
    DROP TABLE t;
END;
ERROR:  (PGDuckDB/DuckdbXactCallback_Cpp) Not implemented Error: Writing to DuckDB and Postgres tables in the same transaction block is not supported
-- Non-existing tables should be allowed to be dropped in a transaction
-- together with DuckDB.
BEGIN;
    DROP TABLE IF EXISTS t_ddb, t_doesnotexist;
NOTICE:  table "t_doesnotexist" does not exist, skipping
END;
CREATE TEMP TABLE t_ddb(a int) USING duckdb;
-- It should also not be allowed to drop duckdb and postgres tables in the same
-- transaction if it's implicitely done using a DROP SCHEMA ... CASCADE.
CREATE SCHEMA mixed;
CREATE TEMP TABLE t_ddb2(a int) USING duckdb;
-- Insert a row into pg_depend to make t_ddb depend on the mixed schema. We do
-- this because wo cannot insert TEMP tables in a schema. This is meant to
-- emulate a MotherDuck table in the mixed schema. To be clear, this is a
-- pretty big hack. Normally you're not supposed to manually mess with
-- pg_depend, but it's the easiest way to test this.
-- NOTE: 1259 is the oid for pg_class, and 2615 is the oid for pg_namespace. These
-- are not expected to change.
INSERT INTO pg_depend(classid, objid, objsubid, refclassid, refobjid, refobjsubid, deptype) SELECT 1259, 't_ddb2'::regclass, 0, 2615, 'mixed'::regnamespace, 0, 'n';
BEGIN;
    DROP SCHEMA mixed CASCADE;
NOTICE:  drop cascades to table t_ddb2
ERROR:  Dropping both DuckDB relations and non-DuckDB objects in the same transaction is not supported
END;
-- We have a special message for tables
CREATE TABLE mixed.t(a int);
BEGIN;
    DROP SCHEMA mixed CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table t_ddb2
drop cascades to table mixed.t
ERROR:  Dropping both DuckDB and non-DuckDB relations in the same transaction is not supported
END;
-- It should work outside of a transaction though.
DROP SCHEMA mixed CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table t_ddb2
drop cascades to table mixed.t
TRUNCATE t_ddb;
INSERT INTO t_ddb VALUES (1);
BEGIN;
DECLARE c SCROLL CURSOR FOR SELECT a FROM t_ddb;
FETCH NEXT FROM c;
 a 
---
 1
(1 row)

FETCH NEXT FROM c;
 a 
---
(0 rows)

FETCH PRIOR FROM c;
 a 
---
 1
(1 row)

COMMIT;
DROP FUNCTION f, f2;
DROP TABLE t;
