DROP EXTENSION pg_duckdb CASCADE;
CREATE EXTENSION pg_duckdb;
SET duckdb.force_execution TO false;
SET duckdb.allow_community_extensions = true;
SELECT * FROM duckdb.query($$ SELECT extension_name, loaded, installed, installed_from FROM duckdb_extensions() WHERE loaded and extension_name != 'jemalloc' $$);
 extension_name | loaded | installed | installed_from 
----------------+--------+-----------+----------------
 core_functions | t      | t         | 
 httpfs         | t      | t         | 
 icu            | t      | t         | 
 json           | t      | t         | 
 parquet        | t      | t         | 
 pgduckdb       | t      | f         | 
(6 rows)

SELECT last_value FROM duckdb.extensions_table_seq;
 last_value 
------------
          1
(1 row)

-- INSERT SHOULD TRIGGER UPDATE OF EXTENSIONS
SELECT duckdb.install_extension('icu');
 install_extension 
-------------------
 
(1 row)

-- Increases the sequence twice because we use ON CONFLICT DO UPDATE. So
-- the trigger fires for both INSERT and UPDATE internally.
SELECT last_value FROM duckdb.extensions_table_seq;
 last_value 
------------
          3
(1 row)

SELECT * FROM duckdb.query($$ SELECT extension_name, loaded, installed, installed_from FROM duckdb_extensions() WHERE loaded and extension_name != 'jemalloc' $$);
 extension_name | loaded | installed | installed_from 
----------------+--------+-----------+----------------
 core_functions | t      | t         | 
 httpfs         | t      | t         | 
 icu            | t      | t         | 
 json           | t      | t         | 
 parquet        | t      | t         | 
 pgduckdb       | t      | f         | 
(6 rows)

-- Check that we can rerun this without issues
SELECT duckdb.install_extension('icu');
 install_extension 
-------------------
 
(1 row)

-- Increases the sequence twice because we use ON CONFLICT DO UPDATE. So
-- the trigger fires for both INSERT and UPDATE internally.
SELECT last_value FROM duckdb.extensions_table_seq;
 last_value 
------------
          5
(1 row)

SELECT * FROM duckdb.query($$ SELECT extension_name, loaded, installed, installed_from FROM duckdb_extensions() WHERE loaded and extension_name != 'jemalloc' $$);
 extension_name | loaded | installed | installed_from 
----------------+--------+-----------+----------------
 core_functions | t      | t         | 
 httpfs         | t      | t         | 
 icu            | t      | t         | 
 json           | t      | t         | 
 parquet        | t      | t         | 
 pgduckdb       | t      | f         | 
(6 rows)

SELECT duckdb.install_extension('aws');
 install_extension 
-------------------
 
(1 row)

SELECT last_value FROM duckdb.extensions_table_seq;
 last_value 
------------
          7
(1 row)

SELECT * FROM duckdb.query($$ SELECT extension_name, loaded, installed, installed_from FROM duckdb_extensions() WHERE loaded and extension_name != 'jemalloc' $$);
 extension_name | loaded | installed | installed_from 
----------------+--------+-----------+----------------
 aws            | t      | t         | core
 core_functions | t      | t         | 
 httpfs         | t      | t         | 
 icu            | t      | t         | 
 json           | t      | t         | 
 parquet        | t      | t         | 
 pgduckdb       | t      | f         | 
(7 rows)

-- DELETE SHOULD TRIGGER UPDATE OF EXTENSIONS
-- But we do not unload for now (would require a restart of DuckDB)
DELETE FROM duckdb.extensions WHERE name = 'aws';
SELECT last_value FROM duckdb.extensions_table_seq;
 last_value 
------------
          8
(1 row)

SELECT * FROM duckdb.query($$ SELECT extension_name, loaded, installed, installed_from FROM duckdb_extensions() WHERE loaded and extension_name != 'jemalloc' $$);
 extension_name | loaded | installed | installed_from 
----------------+--------+-----------+----------------
 aws            | t      | t         | core
 core_functions | t      | t         | 
 httpfs         | t      | t         | 
 icu            | t      | t         | 
 json           | t      | t         | 
 parquet        | t      | t         | 
 pgduckdb       | t      | f         | 
(7 rows)

SELECT duckdb.install_extension('duckpgq', 'community');
 install_extension 
-------------------
 
(1 row)

SELECT last_value FROM duckdb.extensions_table_seq;
 last_value 
------------
         10
(1 row)

SELECT * FROM duckdb.query($$ SELECT extension_name, loaded, installed, installed_from FROM duckdb_extensions() WHERE loaded and extension_name != 'jemalloc' $$);
 extension_name | loaded | installed | installed_from 
----------------+--------+-----------+----------------
 aws            | t      | t         | core
 core_functions | t      | t         | 
 duckpgq        | t      | t         | community
 httpfs         | t      | t         | 
 icu            | t      | t         | 
 json           | t      | t         | 
 parquet        | t      | t         | 
 pgduckdb       | t      | f         | 
(8 rows)

-- cleanup
TRUNCATE duckdb.extensions;
